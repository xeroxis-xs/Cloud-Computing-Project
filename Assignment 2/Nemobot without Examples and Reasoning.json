{"thirdPartyDependencies":[],"code":"/** Handle the user message.\n * @param {string} payload the message sent by user\n * @param {AppState} state the state of the app\n * @param {Tool} tools available tools to perform a task\n */\nasync function run(payload, state, tools) {\n  \n  try {\n    if (!state.started) {\n      // Set knowledge base\n      state.myLearntKnowledge = await parseKnowledgeBase(payload, tools);\n      state.started = true;\n      tools.reply(`Knowledge base has been set based on the given content.`);\n      state.count +=1;\n      tools.reply(`What type of questions do you want to generate? (e.g., 'multiple choice', 'true/false')`);\n      return;\n    }\n    if (state.count == 2) {\n      // Process question type reply\n      state.questionType = await parseQuestionType(payload, tools);\n      tools.reply(`You have selected a ${state.questionType.type} type of quiz`);\n      state.count +=1;\n      tools.reply(`How many questions do you want to generate?`);\n      return;\n    }\n    if (state.count == 3) {\n      // Process question count reply\n      state.questionCount = await parseQuestionCount(payload, tools);\n      state.count +=1;\n      tools.reply(`The following are the generated quiz based on your requests:`);\n      await generateQuestion(state.myLearntKnowledge, state.questionType.type, state.questionCount.count, tools);\n\n      // Reset state\n      state.count = 1;\n      startup(state, tools);\n      return;\n    }\n  } catch (e) {\n    console.error(e);\n    tools.reply(`Sorry, something went wrong: ${e}`);\n  }\n}\n\n/** \n * @param {string} payload the message sent by user\n * @param {Tool} tools available tools to perform a task\n * @returns {string} knowledgeBase\n */\nasync function parseKnowledgeBase(payload, tools) {\n  try {\n      const { myLearntKnowledge } = JSON.parse(\n        await tools.parseKnowledgeBase({\n          message: payload,\n        })\n      );\n    console.log(`Knowledge Base: ${myLearntKnowledge}`);\n    return myLearntKnowledge;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n/** \n * @param {string} payload the message sent by user\n * @param {Tool} tools available tools to perform a task\n * @returns {string} questionType\n */\nasync function parseQuestionType(payload, tools) {\n  try {\n      const { questionType } = JSON.parse(\n        await tools.parseQuestionType({\n        message: payload,\n        })\n      );\n    console.log(`Type of question: ${questionType}`);\n    return {\n      type: questionType,\n    };\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n/** \n * @param {string} payload the message sent by user\n * @param {Tool} tools available tools to perform a task\n * @returns {string} questionCount\n */\nasync function parseQuestionCount(payload, tools) {\n  try {\n    const { questionCount } = JSON.parse( \n        await tools.parseQuestionCount({\n          message: payload,\n        })\n      );\n    console.log(`Number of questions: ${questionCount}`);\n    return {\n      count: questionCount,\n    };\n  }\n  catch (error) {\n    console.error(error);\n  }\n}\n\n/** \n * @param {string} knowledgeBase the user-defined knowledge base\n * @param {string} questionType the type of question to generate\n * @param {Tool} tools available tools to perform a task\n * @returns {string} generated question\n */\nasync function generateQuestion(knowledgeBase, questionType, questionCount, tools) {\n  const uuid = tools.uuid();\n  try {\n    await tools.generateQuestion_stream(\n      (token) => {\n        tools.streamMessage(uuid, token);\n      },\n      {\n        knowledgeBase: knowledgeBase,\n        questionType: questionType,\n        questionCount: questionCount\n      }\n    );\n    \n  } catch (error) {\n    console.log(error);\n  }\n}\n\n/** Startup.\n * @param {AppState} state the state of the app\n * @param {Tool} tools available tools to perform a task\n */\nasync function startup(state, tools) {\n  state.started = false;\n  state.count = 1;\n  state.knowledgeBase = \"\";\n  state.questionType = \"\";\n  state.questionCount = \"\";\n  tools.reply(\"Hello, I'm a quiz creator! Please set my knowledge base by providing the content to be tested on.\");\n}\n\n/** Unit test.\n * @param {Test} test define a test case\n * @param {Tool} tools available tools to perform a task\n */\nfunction unitTest(test, tools) {\n  test(\"Question Type\", 1, async (expect) => {\n    const questionType  = await parseQuestionType(\"a b c\", tools)\n    expect(questionType.type).toBe(\"true/false\");\n  });\n\n    test(\"Question Count\", 1, async (expect) => {\n    const questionCount = await parseQuestionCount(\"ten + one\", tools);\n    expect(questionCount.count).toBe(\"eleven\");\n  });\n}\n\n","llmFunctions":[{"functionName":"parseQuestionType","description":"Detect the type of questions that user would like to generate from the message.","arguments":["message"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"system","content":"Based on the message, your job is to detect the type of question for the quiz based on the answer. \n\nReply with the format below in JSON: \n{\n  \"questionType\": \"\",  // a string describing the type of question for the quiz\n}"},{"role":"user","content":"{{message}}"}],"stream":false,"parameters":{"maxResponse":100,"temperature":0.7,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"generateQuestion","description":"Based on the knowledge base, type of question, and the number of questions, generate a set of quizzes with correct answers.","arguments":["knowledgeBase","questionType","questionCount"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"system","content":"Your job is to understand and learn the knowledge base and create a set of questions based on the information.\n\nYou will create the questions based on the given number of questions and the given type of question.\n\nAs you will be given knowledge base scrapped from notes such as PDF document, you should expect some noise such as page number, you should not include them while learning the knowledge.\n\nReply the list of questions, options and the correct answer you have created in markdown format."},{"role":"user","content":"knowledgeBase: {{knowledgeBase}}\nquestionType: {{questionType}}\nquestionCount: {{questionCount}}"}],"stream":false,"parameters":{"maxResponse":100,"temperature":0.7,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"parseQuestionCount","description":"Detect the number of questions that user would like to generate.","arguments":["message"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"system","content":"Your job is to detect the number of questions for the quiz, that user would like to generate, such as \"five\" or \"2\" from the message.\nÂ \nReply with the format below in JSON: \n{\n  \"questionCount\": \"\",  // a string describing the type of question.\n}"},{"role":"user","content":"{{message}}"}],"stream":false,"parameters":{"maxResponse":100,"temperature":0.7,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"parseKnowledgeBase","description":"Parse a knowledge base or content so that it can be used to generate questions for quiz.","arguments":["message"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"system","content":"You are a helpful assistant that can help to generate a quiz with the following 3 items:\n1. A knowledge base of content used to craft questions\n2. A question type which will indicate the type of questions to craft / generate.\n3. Number of questions to generate for the quiz.\n\nYou will try to understand and process the message content as a knowledge for your usage t create quiz later on. You don't have to strictly restrict yourself to only learn based on the knowledge given, you can generate more knowledge for the similar topic if you think it is helpful for the learners.\n\nReply your learnt knowledge in JSON format:\n{\n\"myLearntKnowledge\": \"\" // a string of information that you have processed which will be used to generate quiz questions later on.\n}"},{"role":"user","content":"{{message}}"}],"stream":false,"parameters":{"maxResponse":100,"temperature":0.7,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]}]}